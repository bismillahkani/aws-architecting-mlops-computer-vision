digraph G {
  # Arrows represent an "unlocks" relationship (opposite of dependency). So chosen
  # because the layout looks more natural that way.
  # To represent subgraph dependencies, subgraphs are represented by BEGIN/END nodes.
  # To render: `dot -Tsvg MLOpsLabelingInfraStackcdkpipeline42E2338A.dot > graph.svg`, open in a browser.
  node [shape="box"];
"BEGIN Build" [shape="cds", style="filled", fillcolor="#b7deff"];
"END Build" [shape="cds", style="filled", fillcolor="#b7deff"];
"Build.Synth";
"Source.mlops-at-edge-for-quality-inspection" -> "Build.Synth";
"BEGIN Build" -> "Build.Synth";
"Build.Synth" -> "END Build";
"BEGIN UpdatePipeline" [shape="cds", style="filled", fillcolor="#b7deff"];
"END UpdatePipeline" [shape="cds", style="filled", fillcolor="#b7deff"];
"UpdatePipeline.SelfMutate";
"Build.Synth" -> "UpdatePipeline.SelfMutate";
"BEGIN UpdatePipeline" -> "UpdatePipeline.SelfMutate";
"UpdatePipeline.SelfMutate" -> "END UpdatePipeline";
"BEGIN Assets" [shape="cds", style="filled", fillcolor="#b7deff"];
"END Assets" [shape="cds", style="filled", fillcolor="#b7deff"];
"Assets.FileAsset1";
"UpdatePipeline.SelfMutate" -> "Assets.FileAsset1";
"Assets.FileAsset2";
"UpdatePipeline.SelfMutate" -> "Assets.FileAsset2";
"Assets.DockerAsset1";
"UpdatePipeline.SelfMutate" -> "Assets.DockerAsset1";
"Assets.DockerAsset2";
"UpdatePipeline.SelfMutate" -> "Assets.DockerAsset2";
"BEGIN Assets" -> "Assets.DockerAsset1";
"BEGIN Assets" -> "Assets.DockerAsset2";
"BEGIN Assets" -> "Assets.FileAsset1";
"BEGIN Assets" -> "Assets.FileAsset2";
"Assets.DockerAsset1" -> "END Assets";
"Assets.DockerAsset2" -> "END Assets";
"Assets.FileAsset1" -> "END Assets";
"Assets.FileAsset2" -> "END Assets";
"BEGIN MLOps-Labeling" [shape="cds", style="filled", fillcolor="#b7deff"];
"END MLOps-Labeling" [shape="cds", style="filled", fillcolor="#b7deff"];
"UpdatePipeline.SelfMutate" -> "BEGIN MLOps-Labeling";
"BEGIN MLOps-Labeling.Statemachine-Pipeline-Stack" [shape="cds", style="filled", fillcolor="#b7deff"];
"END MLOps-Labeling.Statemachine-Pipeline-Stack" [shape="cds", style="filled", fillcolor="#b7deff"];
"MLOps-Labeling.Statemachine-Pipeline-Stack.Deploy";
"MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Deploy";
"MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"Build.Synth" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"Assets.FileAsset1" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"Assets.FileAsset2" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"Assets.DockerAsset1" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"Assets.DockerAsset2" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"BEGIN MLOps-Labeling.Statemachine-Pipeline-Stack" -> "MLOps-Labeling.Statemachine-Pipeline-Stack.Prepare";
"MLOps-Labeling.Statemachine-Pipeline-Stack.Deploy" -> "END MLOps-Labeling.Statemachine-Pipeline-Stack";
"MLOps-Labeling.InvokeLabelingPipeline";
"MLOps-Labeling.Statemachine-Pipeline-Stack.Deploy" -> "MLOps-Labeling.InvokeLabelingPipeline";
"END MLOps-Labeling.Statemachine-Pipeline-Stack" -> "MLOps-Labeling.InvokeLabelingPipeline";
"BEGIN MLOps-Labeling" -> "BEGIN MLOps-Labeling.Statemachine-Pipeline-Stack";
"MLOps-Labeling.InvokeLabelingPipeline" -> "END MLOps-Labeling";
"BEGIN Source" [shape="cds", style="filled", fillcolor="#b7deff"];
"END Source" [shape="cds", style="filled", fillcolor="#b7deff"];
"Source.mlops-at-edge-for-quality-inspection";
"BEGIN Source" -> "Source.mlops-at-edge-for-quality-inspection";
"Source.mlops-at-edge-for-quality-inspection" -> "END Source";
}