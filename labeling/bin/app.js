#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const fs = require("fs");
const js_yaml_1 = require("js-yaml");
const path = require("path");
require("source-map-support/register");
const labeling_pipeline_1 = require("../lib/stacks/labeling-pipeline");
const cdk_nag_1 = require("cdk-nag");
const app = new aws_cdk_lib_1.App();
function getConfig() {
    let configYaml = (0, js_yaml_1.load)(fs.readFileSync(path.resolve("./config.yaml"), "utf8"));
    let repoConfigYaml = (0, js_yaml_1.load)(fs.readFileSync(path.resolve("../repo_config.yaml"), "utf8"));
    let appConfig = {
        repoType: repoConfigYaml['repoType'],
        repoName: repoConfigYaml['repoName'],
        branchName: repoConfigYaml['branchName'],
        githubConnectionArn: repoConfigYaml['githubConnectionArn'],
        githubRepoOwner: repoConfigYaml['githubRepoOwner'],
        pipelineAssetsPrefix: configYaml['pipelineAssetsPrefix'],
        labelingJobPrivateWorkteamArn: configYaml['labelingJobPrivateWorkteamArn'],
        usePrivateWorkteamForLabeling: configYaml['usePrivateWorkteamForLabeling'],
        usePrivateWorkteamForVerification: configYaml['usePrivateWorkteamForVerification'],
        verificationJobPrivateWorkteamArn: configYaml['verificationJobPrivateWorkteamArn'],
        maxLabelsPerLabelingJob: configYaml['maxLabelsPerLabelingJob'],
        labelingPipelineSchedule: configYaml['labelingPipelineSchedule'],
        featureGroupName: aws_cdk_lib_1.Fn.importValue('mlopsfeatureGroup'),
        assetsBucket: aws_cdk_lib_1.Fn.importValue('mlopsDataBucket')
    };
    return appConfig;
}
async function Main() {
    let appConfig = getConfig();
    const labelingPipelineStack = new labeling_pipeline_1.LabelingPipelineStack(app, 'MLOps-Labeling-Infra-Stack', appConfig);
    addSecurityChecks(app, [labelingPipelineStack]);
    app.synth();
}
function addSecurityChecks(app, stacks) {
    for (let stack in stacks) {
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-IAM4", reason: "Suppress disallowed use of managed policies for increased simplicity as this is a sample. Scope down in production!" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-IAM5", reason: "Suppress disallowed use of wildcards in IAM policies for increased simplicity as this is a sample. Scope down in production!" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-L1", reason: "Using fixed python version for lambda functions as sample needs to be stable" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-CB3", reason: "Suppress warning for use of privileged mode for codebuild, as this is required for docker image build" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-CB4", reason: "Suppress required use of KMS for CodeBuild as it incurs additional cost. Consider using KMS for Codebuild in production" }]);
    }
    aws_cdk_lib_1.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
}
Main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUFpRTtBQUNqRSx5QkFBeUI7QUFDekIscUNBQStCO0FBQy9CLDZCQUE2QjtBQUM3Qix1Q0FBcUM7QUFDckMsdUVBQXdFO0FBQ3hFLHFDQUE4RDtBQUU5RCxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztBQW1CdEIsU0FBUyxTQUFTO0lBQ2hCLElBQUksVUFBVSxHQUFRLElBQUEsY0FBSSxFQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25GLElBQUksY0FBYyxHQUFRLElBQUEsY0FBSSxFQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0YsSUFBSSxTQUFTLEdBQWM7UUFDdkIsUUFBUSxFQUFFLGNBQWMsQ0FBQyxVQUFVLENBQUM7UUFDcEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxVQUFVLENBQUM7UUFDcEMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxZQUFZLENBQUM7UUFDeEMsbUJBQW1CLEVBQUUsY0FBYyxDQUFDLHFCQUFxQixDQUFDO1FBQzFELGVBQWUsRUFBRSxjQUFjLENBQUMsaUJBQWlCLENBQUM7UUFDbEQsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLHNCQUFzQixDQUFDO1FBQ3hELDZCQUE2QixFQUFFLFVBQVUsQ0FBQywrQkFBK0IsQ0FBQztRQUMxRSw2QkFBNkIsRUFBRSxVQUFVLENBQUMsK0JBQStCLENBQUM7UUFDMUUsaUNBQWlDLEVBQUUsVUFBVSxDQUFDLG1DQUFtQyxDQUFDO1FBQ2xGLGlDQUFpQyxFQUFFLFVBQVUsQ0FBQyxtQ0FBbUMsQ0FBQztRQUNsRix1QkFBdUIsRUFBRSxVQUFVLENBQUMseUJBQXlCLENBQUM7UUFDOUQsd0JBQXdCLEVBQUUsVUFBVSxDQUFDLDBCQUEwQixDQUFDO1FBQ2hFLGdCQUFnQixFQUFFLGdCQUFFLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO1FBQ3JELFlBQVksRUFBRSxnQkFBRSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztLQUNsRCxDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELEtBQUssVUFBVSxJQUFJO0lBRWpCLElBQUksU0FBUyxHQUFjLFNBQVMsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSx5Q0FBcUIsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDckcsaUJBQWlCLENBQUMsR0FBRyxFQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFBO0lBQzlDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFHRCxTQUFTLGlCQUFpQixDQUFDLEdBQU8sRUFBRSxNQUFlO0lBQy9DLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQ3RCLHlCQUFlLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLHFIQUFxSCxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQy9NLHlCQUFlLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLDhIQUE4SCxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hOLHlCQUFlLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLDhFQUE4RSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3RLLHlCQUFlLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLHVHQUF1RyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ2hNLHlCQUFlLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLHlIQUF5SCxFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQ3JOO0lBQ0QscUJBQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksNEJBQWtCLENBQUMsRUFBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFJRCxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCB7IEFwcCwgQXNwZWN0cywgU3RhY2ssIFN0YWNrUHJvcHMgLEZufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBsb2FkIH0gZnJvbSBcImpzLXlhbWxcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcbmltcG9ydCB7IExhYmVsaW5nUGlwZWxpbmVTdGFjayB9IGZyb20gXCIuLi9saWIvc3RhY2tzL2xhYmVsaW5nLXBpcGVsaW5lXCI7XG5pbXBvcnQgeyBBd3NTb2x1dGlvbnNDaGVja3MgLCBOYWdTdXBwcmVzc2lvbnN9IGZyb20gJ2Nkay1uYWcnO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwQ29uZmlnIGV4dGVuZHMgU3RhY2tQcm9wc3tcbiAgcmVhZG9ubHkgcmVwb1R5cGU6IHN0cmluZztcbiAgcmVhZG9ubHkgcmVwb05hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgYnJhbmNoTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBnaXRodWJDb25uZWN0aW9uQXJuOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGdpdGh1YlJlcG9Pd25lcjogc3RyaW5nO1xuICByZWFkb25seSBwaXBlbGluZUFzc2V0c1ByZWZpeDogc3RyaW5nO1xuICByZWFkb25seSB1c2VQcml2YXRlV29ya3RlYW1Gb3JMYWJlbGluZzogYm9vbGVhbjtcbiAgcmVhZG9ubHkgdXNlUHJpdmF0ZVdvcmt0ZWFtRm9yVmVyaWZpY2F0aW9uOiBib29sZWFuO1xuICByZWFkb25seSBsYWJlbGluZ0pvYlByaXZhdGVXb3JrdGVhbUFybjogc3RyaW5nO1xuICByZWFkb25seSB2ZXJpZmljYXRpb25Kb2JQcml2YXRlV29ya3RlYW1Bcm46IHN0cmluZztcbiAgcmVhZG9ubHkgbWF4TGFiZWxzUGVyTGFiZWxpbmdKb2I6IG51bWJlcjtcbiAgcmVhZG9ubHkgbGFiZWxpbmdQaXBlbGluZVNjaGVkdWxlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGZlYXR1cmVHcm91cE5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgYXNzZXRzQnVja2V0OiBzdHJpbmc7XG5cbn1cbmZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgbGV0IGNvbmZpZ1lhbWw6IGFueSA9IGxvYWQoZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShcIi4vY29uZmlnLnlhbWxcIiksIFwidXRmOFwiKSk7XG4gIGxldCByZXBvQ29uZmlnWWFtbDogYW55ID0gbG9hZChmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKFwiLi4vcmVwb19jb25maWcueWFtbFwiKSwgXCJ1dGY4XCIpKTtcbiAgbGV0IGFwcENvbmZpZzogQXBwQ29uZmlnID0ge1xuICAgICAgcmVwb1R5cGU6IHJlcG9Db25maWdZYW1sWydyZXBvVHlwZSddLFxuICAgICAgcmVwb05hbWU6IHJlcG9Db25maWdZYW1sWydyZXBvTmFtZSddLFxuICAgICAgYnJhbmNoTmFtZTogcmVwb0NvbmZpZ1lhbWxbJ2JyYW5jaE5hbWUnXSxcbiAgICAgIGdpdGh1YkNvbm5lY3Rpb25Bcm46IHJlcG9Db25maWdZYW1sWydnaXRodWJDb25uZWN0aW9uQXJuJ10sXG4gICAgICBnaXRodWJSZXBvT3duZXI6IHJlcG9Db25maWdZYW1sWydnaXRodWJSZXBvT3duZXInXSxcbiAgICAgIHBpcGVsaW5lQXNzZXRzUHJlZml4OiBjb25maWdZYW1sWydwaXBlbGluZUFzc2V0c1ByZWZpeCddLFxuICAgICAgbGFiZWxpbmdKb2JQcml2YXRlV29ya3RlYW1Bcm46IGNvbmZpZ1lhbWxbJ2xhYmVsaW5nSm9iUHJpdmF0ZVdvcmt0ZWFtQXJuJ10sXG4gICAgICB1c2VQcml2YXRlV29ya3RlYW1Gb3JMYWJlbGluZzogY29uZmlnWWFtbFsndXNlUHJpdmF0ZVdvcmt0ZWFtRm9yTGFiZWxpbmcnXSxcbiAgICAgIHVzZVByaXZhdGVXb3JrdGVhbUZvclZlcmlmaWNhdGlvbjogY29uZmlnWWFtbFsndXNlUHJpdmF0ZVdvcmt0ZWFtRm9yVmVyaWZpY2F0aW9uJ10sXG4gICAgICB2ZXJpZmljYXRpb25Kb2JQcml2YXRlV29ya3RlYW1Bcm46IGNvbmZpZ1lhbWxbJ3ZlcmlmaWNhdGlvbkpvYlByaXZhdGVXb3JrdGVhbUFybiddLFxuICAgICAgbWF4TGFiZWxzUGVyTGFiZWxpbmdKb2I6IGNvbmZpZ1lhbWxbJ21heExhYmVsc1BlckxhYmVsaW5nSm9iJ10sXG4gICAgICBsYWJlbGluZ1BpcGVsaW5lU2NoZWR1bGU6IGNvbmZpZ1lhbWxbJ2xhYmVsaW5nUGlwZWxpbmVTY2hlZHVsZSddLFxuICAgICAgZmVhdHVyZUdyb3VwTmFtZTogRm4uaW1wb3J0VmFsdWUoJ21sb3BzZmVhdHVyZUdyb3VwJyksXG4gICAgICBhc3NldHNCdWNrZXQ6IEZuLmltcG9ydFZhbHVlKCdtbG9wc0RhdGFCdWNrZXQnKVxuICB9O1xuICByZXR1cm4gYXBwQ29uZmlnO1xufVxuXG5hc3luYyBmdW5jdGlvbiBNYWluKCkge1xuXG4gIGxldCBhcHBDb25maWc6IEFwcENvbmZpZyA9IGdldENvbmZpZygpO1xuICBjb25zdCBsYWJlbGluZ1BpcGVsaW5lU3RhY2sgPSBuZXcgTGFiZWxpbmdQaXBlbGluZVN0YWNrKGFwcCwgJ01MT3BzLUxhYmVsaW5nLUluZnJhLVN0YWNrJywgYXBwQ29uZmlnKVxuICBhZGRTZWN1cml0eUNoZWNrcyhhcHAsW2xhYmVsaW5nUGlwZWxpbmVTdGFja10pXG4gIGFwcC5zeW50aCgpO1xufVxuXG5cbmZ1bmN0aW9uIGFkZFNlY3VyaXR5Q2hlY2tzKGFwcDpBcHAsIHN0YWNrczogU3RhY2tbXSl7XG4gICAgZm9yIChsZXQgc3RhY2sgaW4gc3RhY2tzKSB7XG4gICAgICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRTdGFja1N1cHByZXNzaW9ucyhzdGFja3Nbc3RhY2tdLFt7aWQ6IFwiQXdzU29sdXRpb25zLUlBTTRcIiwgcmVhc29uOiBcIlN1cHByZXNzIGRpc2FsbG93ZWQgdXNlIG9mIG1hbmFnZWQgcG9saWNpZXMgZm9yIGluY3JlYXNlZCBzaW1wbGljaXR5IGFzIHRoaXMgaXMgYSBzYW1wbGUuIFNjb3BlIGRvd24gaW4gcHJvZHVjdGlvbiFcIiB9XSlcbiAgICAgICAgTmFnU3VwcHJlc3Npb25zLmFkZFN0YWNrU3VwcHJlc3Npb25zKHN0YWNrc1tzdGFja10sW3tpZDogXCJBd3NTb2x1dGlvbnMtSUFNNVwiLCByZWFzb246IFwiU3VwcHJlc3MgZGlzYWxsb3dlZCB1c2Ugb2Ygd2lsZGNhcmRzIGluIElBTSBwb2xpY2llcyBmb3IgaW5jcmVhc2VkIHNpbXBsaWNpdHkgYXMgdGhpcyBpcyBhIHNhbXBsZS4gU2NvcGUgZG93biBpbiBwcm9kdWN0aW9uIVwiIH1dKVxuICAgICAgICBOYWdTdXBwcmVzc2lvbnMuYWRkU3RhY2tTdXBwcmVzc2lvbnMoc3RhY2tzW3N0YWNrXSxbe2lkOiBcIkF3c1NvbHV0aW9ucy1MMVwiLCByZWFzb246IFwiVXNpbmcgZml4ZWQgcHl0aG9uIHZlcnNpb24gZm9yIGxhbWJkYSBmdW5jdGlvbnMgYXMgc2FtcGxlIG5lZWRzIHRvIGJlIHN0YWJsZVwiIH1dKVxuICAgICAgICBOYWdTdXBwcmVzc2lvbnMuYWRkU3RhY2tTdXBwcmVzc2lvbnMoc3RhY2tzW3N0YWNrXSxbe2lkOiBcIkF3c1NvbHV0aW9ucy1DQjNcIiwgcmVhc29uOiBcIlN1cHByZXNzIHdhcm5pbmcgZm9yIHVzZSBvZiBwcml2aWxlZ2VkIG1vZGUgZm9yIGNvZGVidWlsZCwgYXMgdGhpcyBpcyByZXF1aXJlZCBmb3IgZG9ja2VyIGltYWdlIGJ1aWxkXCIgfV0pXG4gICAgICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRTdGFja1N1cHByZXNzaW9ucyhzdGFja3Nbc3RhY2tdLFt7aWQ6IFwiQXdzU29sdXRpb25zLUNCNFwiLCByZWFzb246IFwiU3VwcHJlc3MgcmVxdWlyZWQgdXNlIG9mIEtNUyBmb3IgQ29kZUJ1aWxkIGFzIGl0IGluY3VycyBhZGRpdGlvbmFsIGNvc3QuIENvbnNpZGVyIHVzaW5nIEtNUyBmb3IgQ29kZWJ1aWxkIGluIHByb2R1Y3Rpb25cIiB9XSlcbiAgICB9XG4gICAgQXNwZWN0cy5vZihhcHApLmFkZChuZXcgQXdzU29sdXRpb25zQ2hlY2tzKHt2ZXJib3NlOnRydWV9KSk7XG59XG5cblxuXG5NYWluKCk7XG5cbiJdfQ==