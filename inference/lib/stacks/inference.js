"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inference = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const edge_cicd_pipeline_1 = require("../constructs/edge-cicd-pipeline");
const edge_deployment_orchestration_1 = require("../constructs/edge-deployment-orchestration");
const gg_inference_component_build_1 = require("../constructs/gg-inference-component-build");
const gg_on_ec2_1 = require("../constructs/gg-on-ec2");
class Inference extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // BASE INFRASTRUCTURE
        const ggConstruct = new gg_on_ec2_1.GgOnEc2Construct(this, 'GreengrassOnEc2Construct', props);
        // INFERENCE COMPONENT BUILD
        const ggInferenceComponentBuildConstruct = new gg_inference_component_build_1.GgInferenceComponentBuildConstruct(this, 'InferenceComponentBuildConstruct');
        // EDGE DEPLOYMENT ORCHESTRATION
        const edgeDeploymentOrchestrationConstruct = new edge_deployment_orchestration_1.EdgeDeploymentOrchestrationConstruct(this, 'EdgeDeploymentOrchestrationConstruct', { ...props,
            iotThingName: ggConstruct.iotThingName });
        // EDGE CI/CD PIPELINE
        const cicdPipeline = new edge_cicd_pipeline_1.EdgeCiCdPipelineConstruct(this, 'EdgeCiCdPipelineConstruct', { ...props,
            iotThingName: ggConstruct.iotThingName,
            ggInferenceComponentBuild: ggInferenceComponentBuildConstruct.ggInferenceComponentBuild,
            edgeDeploymentStepFunction: edgeDeploymentOrchestrationConstruct.stepFunctionAction
        });
        this.pipelineName = cicdPipeline.pipelineName;
    }
}
exports.Inference = Inference;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5mZXJlbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUVxQjtBQUdyQix5RUFBNkU7QUFDN0UsK0ZBQW1HO0FBQ25HLDZGQUFnRztBQUNoRyx1REFBMkQ7QUFFM0QsTUFBYSxTQUFVLFNBQVEsbUJBQUs7SUFJbEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFnQjtRQUN4RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixzQkFBc0I7UUFDdEIsTUFBTSxXQUFXLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEYsNEJBQTRCO1FBQzVCLE1BQU0sa0NBQWtDLEdBQUcsSUFBSSxpRUFBa0MsQ0FBQyxJQUFJLEVBQUUsa0NBQWtDLENBQUMsQ0FBQTtRQUUzSCxnQ0FBZ0M7UUFDaEMsTUFBTSxvQ0FBb0MsR0FBRyxJQUFJLG9FQUFvQyxDQUFDLElBQUksRUFBRSxzQ0FBc0MsRUFBRSxFQUFDLEdBQUcsS0FBSztZQUMzSSxZQUFZLEVBQUUsV0FBVyxDQUFDLFlBQVksRUFBQyxDQUFDLENBQUM7UUFFM0Msc0JBQXNCO1FBQ3RCLE1BQU0sWUFBWSxHQUFHLElBQUksOENBQXlCLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFHLEVBQUMsR0FBRyxLQUFLO1lBQzlGLFlBQVksRUFBRSxXQUFXLENBQUMsWUFBWTtZQUN0Qyx5QkFBeUIsRUFBRSxrQ0FBa0MsQ0FBQyx5QkFBeUI7WUFDdkYsMEJBQTBCLEVBQUUsb0NBQW9DLENBQUMsa0JBQWtCO1NBQ3BGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQTtJQUMvQyxDQUFDO0NBQ0Y7QUExQkQsOEJBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1xuICBhd3NfY29kZXBpcGVsaW5lIGFzIGNvZGVwaXBlbGluZSwgQ2ZuT3V0cHV0LCBTdGFja1xufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEFwcENvbmZpZyB9IGZyb20gJy4uLy4uL2Jpbi9hcHAnO1xuaW1wb3J0IHsgRWRnZUNpQ2RQaXBlbGluZUNvbnN0cnVjdCB9IGZyb20gJy4uL2NvbnN0cnVjdHMvZWRnZS1jaWNkLXBpcGVsaW5lJztcbmltcG9ydCB7IEVkZ2VEZXBsb3ltZW50T3JjaGVzdHJhdGlvbkNvbnN0cnVjdCB9IGZyb20gXCIuLi9jb25zdHJ1Y3RzL2VkZ2UtZGVwbG95bWVudC1vcmNoZXN0cmF0aW9uXCI7XG5pbXBvcnQgeyBHZ0luZmVyZW5jZUNvbXBvbmVudEJ1aWxkQ29uc3RydWN0IH0gZnJvbSAnLi4vY29uc3RydWN0cy9nZy1pbmZlcmVuY2UtY29tcG9uZW50LWJ1aWxkJztcbmltcG9ydCB7IEdnT25FYzJDb25zdHJ1Y3QgfSBmcm9tIFwiLi4vY29uc3RydWN0cy9nZy1vbi1lYzJcIjtcblxuZXhwb3J0IGNsYXNzIEluZmVyZW5jZSBleHRlbmRzIFN0YWNrIHtcblxuICByZWFkb25seSBlZGdlRGVwbG95bWVudFBpcGVsaW5lOiBjb2RlcGlwZWxpbmUuUGlwZWxpbmU7XG4gIHJlYWRvbmx5IHBpcGVsaW5lTmFtZSA6Q2ZuT3V0cHV0O1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwQ29uZmlnKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgXG4gICAgLy8gQkFTRSBJTkZSQVNUUlVDVFVSRVxuICAgIGNvbnN0IGdnQ29uc3RydWN0ID0gbmV3IEdnT25FYzJDb25zdHJ1Y3QodGhpcywgJ0dyZWVuZ3Jhc3NPbkVjMkNvbnN0cnVjdCcsIHByb3BzKTtcblxuICAgIC8vIElORkVSRU5DRSBDT01QT05FTlQgQlVJTERcbiAgICBjb25zdCBnZ0luZmVyZW5jZUNvbXBvbmVudEJ1aWxkQ29uc3RydWN0ID0gbmV3IEdnSW5mZXJlbmNlQ29tcG9uZW50QnVpbGRDb25zdHJ1Y3QodGhpcywgJ0luZmVyZW5jZUNvbXBvbmVudEJ1aWxkQ29uc3RydWN0JylcbiAgICBcbiAgICAvLyBFREdFIERFUExPWU1FTlQgT1JDSEVTVFJBVElPTlxuICAgIGNvbnN0IGVkZ2VEZXBsb3ltZW50T3JjaGVzdHJhdGlvbkNvbnN0cnVjdCA9IG5ldyBFZGdlRGVwbG95bWVudE9yY2hlc3RyYXRpb25Db25zdHJ1Y3QodGhpcywgJ0VkZ2VEZXBsb3ltZW50T3JjaGVzdHJhdGlvbkNvbnN0cnVjdCcsIHsuLi5wcm9wcyxcbiAgICAgIGlvdFRoaW5nTmFtZTogZ2dDb25zdHJ1Y3QuaW90VGhpbmdOYW1lfSk7XG5cbiAgICAvLyBFREdFIENJL0NEIFBJUEVMSU5FXG4gICAgY29uc3QgY2ljZFBpcGVsaW5lID0gbmV3IEVkZ2VDaUNkUGlwZWxpbmVDb25zdHJ1Y3QodGhpcywgJ0VkZ2VDaUNkUGlwZWxpbmVDb25zdHJ1Y3QnLCAgey4uLnByb3BzLFxuICAgICAgaW90VGhpbmdOYW1lOiBnZ0NvbnN0cnVjdC5pb3RUaGluZ05hbWUsXG4gICAgICBnZ0luZmVyZW5jZUNvbXBvbmVudEJ1aWxkOiBnZ0luZmVyZW5jZUNvbXBvbmVudEJ1aWxkQ29uc3RydWN0LmdnSW5mZXJlbmNlQ29tcG9uZW50QnVpbGQsXG4gICAgICBlZGdlRGVwbG95bWVudFN0ZXBGdW5jdGlvbjogZWRnZURlcGxveW1lbnRPcmNoZXN0cmF0aW9uQ29uc3RydWN0LnN0ZXBGdW5jdGlvbkFjdGlvblxuICAgIH0pO1xuXG4gICAgdGhpcy5waXBlbGluZU5hbWUgPSBjaWNkUGlwZWxpbmUucGlwZWxpbmVOYW1lXG4gIH1cbn1cblxuIl19