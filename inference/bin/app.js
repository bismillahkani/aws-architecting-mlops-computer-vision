#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const fs = require("fs");
const js_yaml_1 = require("js-yaml");
const path = require("path");
require("source-map-support/register");
const inference_pipeline_1 = require("../lib/stacks/inference-pipeline");
const cdk_nag_1 = require("cdk-nag");
const app = new aws_cdk_lib_1.App();
function getConfig() {
    let configYaml = (0, js_yaml_1.load)(fs.readFileSync(path.resolve("./config.yaml"), "utf8"));
    let repoConfigYaml = (0, js_yaml_1.load)(fs.readFileSync(path.resolve("../repo_config.yaml"), "utf8"));
    let appConfig = {
        repoType: repoConfigYaml['repoType'],
        repoName: repoConfigYaml['repoName'],
        branchName: repoConfigYaml['branchName'],
        githubConnectionArn: repoConfigYaml['githubConnectionArn'],
        githubRepoOwner: repoConfigYaml['githubRepoOwner'],
        pipelinePrefix: configYaml['pipelineAssetsPrefix'],
        assetsBucket: aws_cdk_lib_1.Fn.importValue('mlopsDataBucket'),
        ggProps: {
            thingIotPolicyName: configYaml['gg']['thingIotPolicyName'],
            tokenExchangeRoleAlias: configYaml['gg']['tokenExchangeRoleAlias'],
            allowAssumeTokenExchangeRolePolicyName: configYaml['gg']['allowAssumeTokenExchangeRolePolicyName'],
            iotThingName: configYaml['gg']['iotThingName']
        },
        deploymentProps: {
            smModelPackageGroupName: aws_cdk_lib_1.Fn.importValue('mlopsModelPackageGroup'),
            ggModelComponentName: configYaml['edgeDeploymentOrchestration']['ggModelComponentName'],
            ggInferenceComponentName: configYaml['edgeDeploymentOrchestration']['ggInferenceComponentName']
        }
    };
    return appConfig;
}
async function Main() {
    const stack = new inference_pipeline_1.InferenceCdkPipeline(app, 'MLOps-Inference-Infra-Stack', getConfig());
    addSecurityChecks(app, [stack]);
    app.synth();
}
function addSecurityChecks(app, stacks) {
    for (let stack in stacks) {
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-IAM4", reason: "Suppress disallowed use of managed policies for increased simplicity as this is a sample. Scope down in production!" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-IAM5", reason: "Suppress disallowed use of wildcards in IAM policies for increased simplicity as this is a sample. Scope down in production!" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-L1", reason: "Using fixed python version for lambda functions as sample needs to be stable" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-CB3", reason: "Suppress warning for use of privileged mode for codebuild, as this is required for docker image build" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-CB4", reason: "Suppress required use of KMS for CodeBuild as it incurs additional cost. Consider using KMS for Codebuild in production" }]);
    }
    aws_cdk_lib_1.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
}
Main();
//# sourceMappingURL=data:application/json;base64,