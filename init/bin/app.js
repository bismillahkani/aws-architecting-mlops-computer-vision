#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const fs = require("fs");
const js_yaml_1 = require("js-yaml");
const path = require("path");
require("source-map-support/register");
const init_1 = require("../lib/stacks/init");
const cdk_nag_1 = require("cdk-nag");
const app = new aws_cdk_lib_1.App();
function getConfig() {
    let configYaml = (0, js_yaml_1.load)(fs.readFileSync(path.resolve("./config.yaml"), "utf8"));
    let repoConfigYaml = (0, js_yaml_1.load)(fs.readFileSync(path.resolve("../repo_config.yaml"), "utf8"));
    let appConfig = {
        repoType: repoConfigYaml['repoType'],
        repoName: repoConfigYaml['repoName'],
        branchName: repoConfigYaml['branchName'],
        featureGroupName: configYaml['featureGroupName'],
        modelPackageGroupName: configYaml['modelPackageGroupName'],
        modelPackageGroupDescription: configYaml['modelPackageGroupDescription'],
    };
    return appConfig;
}
async function Main() {
    let appConfig = getConfig();
    let initStack = new init_1.LabelingInitStack(app, 'MLOps-Init-Stack', appConfig);
    addSecurityChecks(app, [initStack]);
    app.synth();
}
function addSecurityChecks(app, stacks) {
    for (let stack in stacks) {
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-IAM4", reason: "Suppress disallowed use of managed policies for increased simplicity as this is a sample. Scope down in production!" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-IAM5", reason: "Suppress disallowed use of wildcards in IAM policies for increased simplicity as this is a sample. Scope down in production!" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-L1", reason: "Using fixed python version for lambda functions as sample needs to be stable" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-CB3", reason: "Suppress warning for use of privileged mode for codebuild, as this is required for docker image build" }]);
        cdk_nag_1.NagSuppressions.addStackSuppressions(stacks[stack], [{ id: "AwsSolutions-CB4", reason: "Suppress required use of KMS for CodeBuild as it incurs additional cost. Consider using KMS for Codebuild in production" }]);
    }
    aws_cdk_lib_1.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
}
Main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUE4RDtBQUM5RCx5QkFBeUI7QUFDekIscUNBQStCO0FBQy9CLDZCQUE2QjtBQUM3Qix1Q0FBcUM7QUFDckMsNkNBQW9FO0FBQ3BFLHFDQUE4RDtBQUU5RCxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztBQVd0QixTQUFTLFNBQVM7SUFDaEIsSUFBSSxVQUFVLEdBQVEsSUFBQSxjQUFJLEVBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkYsSUFBSSxjQUFjLEdBQVEsSUFBQSxjQUFJLEVBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM3RixJQUFJLFNBQVMsR0FBYztRQUN2QixRQUFRLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQztRQUNwQyxRQUFRLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQztRQUNwQyxVQUFVLEVBQUUsY0FBYyxDQUFDLFlBQVksQ0FBQztRQUN4QyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFDaEQscUJBQXFCLEVBQUUsVUFBVSxDQUFDLHVCQUF1QixDQUFDO1FBQzFELDRCQUE0QixFQUFFLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQztLQUMzRSxDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELEtBQUssVUFBVSxJQUFJO0lBRWpCLElBQUksU0FBUyxHQUFjLFNBQVMsRUFBRSxDQUFDO0lBQ3ZDLElBQUksU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbEUsaUJBQWlCLENBQUMsR0FBRyxFQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUNsQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZCxDQUFDO0FBR0QsU0FBUyxpQkFBaUIsQ0FBQyxHQUFPLEVBQUUsTUFBZTtJQUMvQyxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTtRQUN0Qix5QkFBZSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxxSEFBcUgsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMvTSx5QkFBZSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSw4SEFBOEgsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN4Tix5QkFBZSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSw4RUFBOEUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN0Syx5QkFBZSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSx1R0FBdUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNoTSx5QkFBZSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSx5SEFBeUgsRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUNyTjtJQUNELHFCQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLDRCQUFrQixDQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBQ0QsSUFBSSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgeyBBcHAsIEFzcGVjdHMsIFN0YWNrLCBTdGFja1Byb3BzIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgbG9hZCB9IGZyb20gXCJqcy15YW1sXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgeyBMYWJlbGluZ0luaXRTdGFjayBhcyBJbml0U3RhY2sgfSBmcm9tICcuLi9saWIvc3RhY2tzL2luaXQnO1xuaW1wb3J0IHsgQXdzU29sdXRpb25zQ2hlY2tzICwgTmFnU3VwcHJlc3Npb25zfSBmcm9tICdjZGstbmFnJztcblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcENvbmZpZyBleHRlbmRzIFN0YWNrUHJvcHN7XG4gIHJlYWRvbmx5IHJlcG9UeXBlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHJlcG9OYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGJyYW5jaE5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgZmVhdHVyZUdyb3VwTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBtb2RlbFBhY2thZ2VHcm91cE5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgbW9kZWxQYWNrYWdlR3JvdXBEZXNjcmlwdGlvbjogc3RyaW5nO1xuXG59XG5mdW5jdGlvbiBnZXRDb25maWcoKSB7XG4gIGxldCBjb25maWdZYW1sOiBhbnkgPSBsb2FkKGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoXCIuL2NvbmZpZy55YW1sXCIpLCBcInV0ZjhcIikpO1xuICBsZXQgcmVwb0NvbmZpZ1lhbWw6IGFueSA9IGxvYWQoZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShcIi4uL3JlcG9fY29uZmlnLnlhbWxcIiksIFwidXRmOFwiKSk7XG4gIGxldCBhcHBDb25maWc6IEFwcENvbmZpZyA9IHtcbiAgICAgIHJlcG9UeXBlOiByZXBvQ29uZmlnWWFtbFsncmVwb1R5cGUnXSxcbiAgICAgIHJlcG9OYW1lOiByZXBvQ29uZmlnWWFtbFsncmVwb05hbWUnXSxcbiAgICAgIGJyYW5jaE5hbWU6IHJlcG9Db25maWdZYW1sWydicmFuY2hOYW1lJ10sXG4gICAgICBmZWF0dXJlR3JvdXBOYW1lOiBjb25maWdZYW1sWydmZWF0dXJlR3JvdXBOYW1lJ10sXG4gICAgICBtb2RlbFBhY2thZ2VHcm91cE5hbWU6IGNvbmZpZ1lhbWxbJ21vZGVsUGFja2FnZUdyb3VwTmFtZSddLFxuICAgICAgbW9kZWxQYWNrYWdlR3JvdXBEZXNjcmlwdGlvbjogY29uZmlnWWFtbFsnbW9kZWxQYWNrYWdlR3JvdXBEZXNjcmlwdGlvbiddLFxuICB9O1xuICByZXR1cm4gYXBwQ29uZmlnO1xufVxuXG5hc3luYyBmdW5jdGlvbiBNYWluKCkge1xuXG4gIGxldCBhcHBDb25maWc6IEFwcENvbmZpZyA9IGdldENvbmZpZygpO1xuICBsZXQgaW5pdFN0YWNrID0gbmV3IEluaXRTdGFjayhhcHAsICdNTE9wcy1Jbml0LVN0YWNrJywgYXBwQ29uZmlnKTtcbiAgYWRkU2VjdXJpdHlDaGVja3MoYXBwLFtpbml0U3RhY2tdKVxuICBhcHAuc3ludGgoKTtcbn1cblxuXG5mdW5jdGlvbiBhZGRTZWN1cml0eUNoZWNrcyhhcHA6QXBwLCBzdGFja3M6IFN0YWNrW10pe1xuICAgIGZvciAobGV0IHN0YWNrIGluIHN0YWNrcykge1xuICAgICAgICBOYWdTdXBwcmVzc2lvbnMuYWRkU3RhY2tTdXBwcmVzc2lvbnMoc3RhY2tzW3N0YWNrXSxbe2lkOiBcIkF3c1NvbHV0aW9ucy1JQU00XCIsIHJlYXNvbjogXCJTdXBwcmVzcyBkaXNhbGxvd2VkIHVzZSBvZiBtYW5hZ2VkIHBvbGljaWVzIGZvciBpbmNyZWFzZWQgc2ltcGxpY2l0eSBhcyB0aGlzIGlzIGEgc2FtcGxlLiBTY29wZSBkb3duIGluIHByb2R1Y3Rpb24hXCIgfV0pXG4gICAgICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRTdGFja1N1cHByZXNzaW9ucyhzdGFja3Nbc3RhY2tdLFt7aWQ6IFwiQXdzU29sdXRpb25zLUlBTTVcIiwgcmVhc29uOiBcIlN1cHByZXNzIGRpc2FsbG93ZWQgdXNlIG9mIHdpbGRjYXJkcyBpbiBJQU0gcG9saWNpZXMgZm9yIGluY3JlYXNlZCBzaW1wbGljaXR5IGFzIHRoaXMgaXMgYSBzYW1wbGUuIFNjb3BlIGRvd24gaW4gcHJvZHVjdGlvbiFcIiB9XSlcbiAgICAgICAgTmFnU3VwcHJlc3Npb25zLmFkZFN0YWNrU3VwcHJlc3Npb25zKHN0YWNrc1tzdGFja10sW3tpZDogXCJBd3NTb2x1dGlvbnMtTDFcIiwgcmVhc29uOiBcIlVzaW5nIGZpeGVkIHB5dGhvbiB2ZXJzaW9uIGZvciBsYW1iZGEgZnVuY3Rpb25zIGFzIHNhbXBsZSBuZWVkcyB0byBiZSBzdGFibGVcIiB9XSlcbiAgICAgICAgTmFnU3VwcHJlc3Npb25zLmFkZFN0YWNrU3VwcHJlc3Npb25zKHN0YWNrc1tzdGFja10sW3tpZDogXCJBd3NTb2x1dGlvbnMtQ0IzXCIsIHJlYXNvbjogXCJTdXBwcmVzcyB3YXJuaW5nIGZvciB1c2Ugb2YgcHJpdmlsZWdlZCBtb2RlIGZvciBjb2RlYnVpbGQsIGFzIHRoaXMgaXMgcmVxdWlyZWQgZm9yIGRvY2tlciBpbWFnZSBidWlsZFwiIH1dKVxuICAgICAgICBOYWdTdXBwcmVzc2lvbnMuYWRkU3RhY2tTdXBwcmVzc2lvbnMoc3RhY2tzW3N0YWNrXSxbe2lkOiBcIkF3c1NvbHV0aW9ucy1DQjRcIiwgcmVhc29uOiBcIlN1cHByZXNzIHJlcXVpcmVkIHVzZSBvZiBLTVMgZm9yIENvZGVCdWlsZCBhcyBpdCBpbmN1cnMgYWRkaXRpb25hbCBjb3N0LiBDb25zaWRlciB1c2luZyBLTVMgZm9yIENvZGVidWlsZCBpbiBwcm9kdWN0aW9uXCIgfV0pXG4gICAgfVxuICAgIEFzcGVjdHMub2YoYXBwKS5hZGQobmV3IEF3c1NvbHV0aW9uc0NoZWNrcyh7dmVyYm9zZTp0cnVlfSkpO1xufVxuTWFpbigpO1xuXG4iXX0=